/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mapper

import (
	"github.com/ernestio/aws-definition-mapper/definition"
	"github.com/ernestio/aws-definition-mapper/output"
)

// ConvertPayload will build an FSMMessage based on an input definition
func ConvertPayload(p *definition.Payload) *output.FSMMessage {
	m := output.FSMMessage{
		ID:          p.ServiceID,
		Service:     p.ServiceID,
		ServiceName: p.Service.Name,
		ClientName:  p.Client.Name,
		Type:        p.Datacenter.Type,
	}

	// Map datacenters
	m.Datacenters.Items = MapDatacenters(p.Datacenter)

	// Map VPCs
	m.VPCs.Items = MapVPCs(p)

	// Map networks
	m.Networks.Items = MapNetworks(p.Service)

	// Map instances
	m.Instances.Items = MapInstances(p.Service)

	// Map firewalls
	m.Firewalls.Items = MapSecurityGroups(p.Service)

	// Map nats/port forwarding
	m.Nats.Items = MapNats(p.Service)

	return &m
}

// MapProviderData will map any information generated by a provider that is not
// deductible from the input definition
func MapProviderData(m, om *output.FSMMessage) {
	// Map network ID's
	for i, network := range m.Networks.Items {
		nw := om.FindNetwork(network.Name)
		if nw != nil {
			m.Networks.Items[i].NetworkAWSID = nw.NetworkAWSID
		}
	}

	// Map instance ID's
	for i, instance := range m.Instances.Items {
		in := om.FindInstance(instance.Name)
		if in != nil {
			m.Instances.Items[i].InstanceAWSID = in.InstanceAWSID
			m.Instances.Items[i].PublicIP = in.PublicIP
		}
	}

	// Map firewall ID's
	for i, firewall := range m.Firewalls.Items {
		fw := om.FindFirewall(firewall.Name)
		if fw != nil {
			m.Firewalls.Items[i].SecurityGroupAWSID = fw.SecurityGroupAWSID
		}
	}

	// Map nat ID's
	for i, nat := range m.Nats.Items {
		nt := om.FindNat(nat.Name)
		if nt != nil {
			m.Nats.Items[i].NatAWSID = nt.NatAWSID
		}
	}
}
